<?xml version="1.0" encoding="UTF-8"?>
<!-- scan: 当scan被设置为true时，当配置文件发生改变，将会被重新加载，默认为true
     scanPeriod: 检测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认为毫秒，当scan=true时这个值生效，默认时间间隔为1分钟
     debug: 当被设置为true时，将打印出logback内部日志信息，实时查看logback运行信息，默认为false -->
<configuration scan="false" scanPeriod="10 seconds" debug="false">
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <contextName>stay-curious</contextName>

    <property name="LOG_BASE_DIR" value="logs"/>

    <!-- ConsoleAppender控制台日志 -->
    <!-- <appender>是<configuration>的子节点，是负责写日志的组件，<appender>有很多种。必要属性name和class:
      name指定<appender>的名称
      class指定<appender>的全限定名-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- encoder表示对参数进行格式化 -->
        <encoder>
            <pattern>
                ${CONSOLE_LOG_PATTERN}
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- RollingFileAppender滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。要想RollingFileAppender起作用，
    必须同时设置RollingPolicy和TriggeringPolicy。不过，如果RollingPolicy也实现了TriggeringPolicy接口，那么只需要设置RollingPolicy。 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>
                ${FILE_LOG_PATTERN}
            </pattern>
            <charset>UTF-8</charset>
        </encoder>

        <!-- RollingFileAppender的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），
        活动文件的名字不会改变；如果没设置file，活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。 -->
        <file>${LOG_BASE_DIR}/stay-curious.log</file>

        <!-- <rollingPolicy>的作用是当发生滚动时，定义RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- <fileNamePattern>，必要节点，包含文件名及"%d"转换符，"%d"可以包含一个Java.text.SimpleDateFormat指定的时间格式，
            如%d{yyyy-MM}，如果直接使用%d那么格式为yyyy-MM-dd -->
            <fileNamePattern>${LOG_BASE_DIR}/stay-curious-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 文件大小超过最大值，会重新建一个文件-->
            <maxFileSize>50MB</maxFileSize>
            <!-- <maxHistory>，可选节点，控制保留的归档文件的最大数量，如果超出数量就删除旧文件-->
            <maxHistory>2</maxHistory>
            <!-- 限制归档文件总的大小，当所有的归档文件总大小在轮转周期之前达到了该阈值，则会依次删除最旧的日志文件 -->
            <totalSizeCap>500MB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- 错误日志 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- ERROR级别及ERROR以上的日志才会进行输出 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>

        <encoder>
            <pattern>
                ${FILE_LOG_PATTERN}
            </pattern>
            <charset>UTF-8</charset>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_BASE_DIR}/error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <totalSizeCap>500MB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- <root>也是<logger>元素，但是它是根logger，只有一个level属性，因为它的name就是ROOT

      <appender-ref>表示root节点将日志级别大于等于info的交给已经配置好的名为FILE、STDOUT、ERROR_FILE的<appender>进行处理，<appender>
      分别将信息输出到对应位置。
     -->
    <root level="INFO">
        <appender-ref ref="FILE"/>
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ERROR_FILE"/>
    </root>

    <!-- logger用来设置某一个包或者具体某一个类的日志打印级别(大于等于此级别时才会进行处理)、以及指定<appender>。<logger>可以包含零个或者多个
    <appender-ref>元素，标识这个appender将会添加到这个logger。

    <logger>仅有一个name属性、一个可选的level属性和一个可选的additivity属性:
    name: 用来指定受此logger约束的某一个包或者具体的某一个类，包路径越少越是父级
    level: 用来设置打印级别，五个常用打印级别从低至高依次为TRACE、DEBUG、INFO、WARN、ERROR，如果未设置级别，那么当前logger会继承上级的级别
    additivity: 是否向上级logger传递打印信息，默认为true。 -->
    <logger name="org" level="INFO"></logger>
    <logger name="com" level="INFO"></logger>
    <logger name="net" level="INFO"></logger>


</configuration>